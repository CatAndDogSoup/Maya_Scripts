Trans (all transmission samples through camera)
    C.*<TS>.*

SubSurf (all subsurface samples through camera)
    C.*<TD>.*

Spec (all specular samples through camera)
    C.*<RS>.*

Diff (all diffuse samples through camera)
    C.*<RD>.*

Emiss (all emission samples through camera, including lights)
    C.*O

Caustics (all caustics samples through camera)
    CDS.*


(script from an Arvid Schneider video, but has my own LPEs instead of the ones that they use)

### AUTOWRITE SCRIPT ###

import pymel.core as pmc
import mtoa

interface = mtoa.aovs.AOVInterface()

class Aov(object):
    def __init__(self, name, lpe):
        self.name = name
        self.lpe = lpe
        self.lpeGroup = None
        
    def addLightGroup(self, lightGroup):
        self.lpeGroup = self.lpe.replace('L.', "L.'{}'".format(lightGroup))
        
aovKeys = [
Aov("Beauty", lpe = "C.*<L.>"),
Aov("Caustics", lpe = "CDS.*<L.>"),
Aov("Transmission", lpe = "C<TS>.*<L.>"),
Aov("SubSurf", lpe = "C.*<TD>.*<L.>"),
Aov("Diffuse", lpe = "C.*<RD>.*<L.>"),
Aov("Emission", lpe = "C.*O<L.>"),
Aov("Specular", lpe = " C.*<RS>.*<L.>"),
]

def getLights():
    return pmc.ls(type=['aiAreaLight', 'aiSkyDomeLight'])
    
def getLightGroups():
    groups = []
    for light in getLights():
        groups.append(light.aiAov.get())
    return groups
    
for aovKey in aovKeys:
    for lightGroup in getLightGroups():
        sceneAov = interface.addAOV("{}_{}".format(lightGroup, aovKey.name))
        aiAov = pmc.PyNode(sceneAov.node)
        aovKey.addLightGroup(lightGroup)
        aiAov.lightPathExpression.set(aovKey.lpeGroup)
